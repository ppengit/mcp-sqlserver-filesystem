name: Build Desktop Application

on:
  push:
    branches: [ main ]
    paths:
      - 'src-tauri/**'
      - 'src/mcp_sqlserver_filesystem/web/static/**'
      - '.github/workflows/build-desktop.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src-tauri/**'
      - 'src/mcp_sqlserver_filesystem/web/static/**'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-desktop:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'arm64'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            arch: 'x86_64'
          - platform: 'ubuntu-20.04'
            args: '--target x86_64-unknown-linux-gnu'
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x86_64'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x86_64'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install frontend dependencies (if package.json exists)
        if: hashFiles('package.json') != ''
        run: npm install

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}

      - name: Copy binaries to desktop_binaries
        shell: bash
        run: |
          # Create desktop_binaries directory
          mkdir -p src/mcp_sqlserver_filesystem/desktop_binaries
          
          # Platform-specific binary copying
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            # Windows
            cp src-tauri/target/${{ matrix.target }}/release/mcp-sqlserver-filesystem.exe \
               src/mcp_sqlserver_filesystem/desktop_binaries/mcp-sqlserver-filesystem.exe.windows-${{ matrix.arch }}
          elif [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            # macOS
            cp src-tauri/target/${{ matrix.target }}/release/mcp-sqlserver-filesystem \
               src/mcp_sqlserver_filesystem/desktop_binaries/mcp-sqlserver-filesystem.macos-${{ matrix.arch }}
          else
            # Linux
            cp src-tauri/target/${{ matrix.target }}/release/mcp-sqlserver-filesystem \
               src/mcp_sqlserver_filesystem/desktop_binaries/mcp-sqlserver-filesystem.linux-${{ matrix.arch }}
          fi

      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: desktop-binaries-${{ matrix.platform }}-${{ matrix.arch }}
          path: src/mcp_sqlserver_filesystem/desktop_binaries/

  commit-binaries:
    needs: build-desktop
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Merge binaries
        run: |
          # Create desktop_binaries directory
          mkdir -p src/mcp_sqlserver_filesystem/desktop_binaries
          
          # Copy all binaries from artifacts
          find artifacts -name "mcp-sqlserver-filesystem*" -type f | while read file; do
            cp "$file" src/mcp_sqlserver_filesystem/desktop_binaries/
          done
          
          # Update manifest
          cat > src/mcp_sqlserver_filesystem/desktop_binaries/manifest.json << EOF
          {
            "platform": "multi-platform",
            "architecture": "multi-arch",
            "files": [
              $(ls src/mcp_sqlserver_filesystem/desktop_binaries/mcp-sqlserver-filesystem* | grep -v manifest.json | sed 's/.*\///' | sed 's/^/      "/' | sed 's/$/"/' | paste -sd,)
            ],
            "build_time": "$(date -u +%Y-%m-%dT%H:%M:%S)",
            "version": "$(python -c "import re; content=open('src/mcp_sqlserver_filesystem/__init__.py').read(); print(re.search(r'__version__ = \"([^\"]+)\"', content).group(1))")",
            "note": "Auto-built desktop binaries for cross-platform support"
          }
          EOF

      - name: Commit and push binaries
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add src/mcp_sqlserver_filesystem/desktop_binaries/
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-update desktop binaries [skip ci]"
            git push
          fi